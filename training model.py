# -*- coding: utf-8 -*-
"""Untitled72.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W0WQfD2TtBYNyQ8ODRRT5J0HeoT7JPvc
"""

!wget "https://storage.googleapis.com/kaggle-data-sets/809358/1386555/bundle/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20240127%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240127T192738Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=3df4db21327b9f7884fcf42a1fa12ab60419b569cae0d772022cf5cf2540b584d4a36eeeb381500ebce0cacf5f3b65cca45392bf58ed7876c88866fa63660636c94225a54a371c2c13f1f8bf35095821584f03a54b655eb7087b1e3683e69dc7273aac05b78e82ad6948518dcaf2c1b81f4fca0c78bea7f420b5a629d49bb30a81a067beb663bd19b45124945cfd84e452f18f362728d616f5fa9d132bdc2f8c92e65fa44c47d41062138764290c30effe7142e26524618b053b6336afe1ae32ada3fb58b274600e7b8adb3bd46937213974bbc0ca84819261cb0e99b01dc4e51594c1f423a779605fe1d440d57294774ff5376d6919d456d059741365e8515b"

!unzip "/content/archive.zip"

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import os
from PIL import Image
import numpy as np

# Define the directories
mask_dir = '/content/data/with_mask'
without_mask_dir = '/content/data/without_mask'

# Initialize lists to store the images and labels
# Initialize lists to store the images and labels
images = []
labels = []

# Process images with masks
for filename in os.listdir(mask_dir):
    img = Image.open(os.path.join(mask_dir, filename))
    try:
      img = img.resize((224, 224))
      images.append(np.array(img))
      labels.append(1)  # Assign label '1' for images with masks
    except:
      print("error")

# Process images without masks
for filename in os.listdir(without_mask_dir):
    img = Image.open(os.path.join(without_mask_dir, filename))
    try:
      img = img.resize((224, 224))
      images.append(np.array(img))
      labels.append(0)  # Assign label '0' for images without masks
    except:
      print("error")
# Convert lists to numpy arrays

# Check the shape of each image
for i, img in enumerate(images):
    if img.shape != (224, 224, 3):
        print(f"Image index {i} shape: {img.shape}")

# Assuming 'images' is your list
indices_to_remove = [1023, 1192, 2286, 2486, 2728, 3518, 3576, 4181, 4631]

# Create a new list without the indices to remove
images = [image for idx, image in enumerate(images) if idx not in indices_to_remove]

# Assuming 'images' is your list
indices_to_remove =  [1023, 1192, 2286, 2486, 2728, 3518, 3576, 4181, 4631]


# Create a new list without the indices to remove
labels = [label for idx, label in enumerate(labels) if idx not in indices_to_remove]

images = np.array(images)

images.shape

labels = np.array(labels)

labels.shape

len(labels)

images = np.array(images)
labels = np.array(labels)

images[0].shape

import matplotlib.pyplot as plt
import random

# Assuming 'images' is your list of images and 'labels' is your list of labels
random_indices = random.sample(range(len(images)), 20)

fig, axs = plt.subplots(2, 5, figsize=(15, 6))
axs = axs.ravel()

for i in range(10):
    idx = random_indices[i]
    axs[i].imshow(images[idx])
    axs[i].set_title(f'Label: {labels[idx]}')
    axs[i].axis('off')

plt.tight_layout()
plt.show()

import random

# Assuming 'images' is your list of images and 'labels' is your list of labels
combined = list(zip(images, labels))
random.shuffle(combined)

images[:], labels[:] = zip(*combined)

import matplotlib.pyplot as plt

# Assuming 'images' is your list of images and 'labels' is your list of labels
fig, axs = plt.subplots(2, 5, figsize=(15, 6))
axs = axs.ravel()

for i in range(10):
    axs[i].imshow(images[i])
    axs[i].set_title(f'Label: {labels[i]}')
    axs[i].axis('off')

plt.tight_layout()
plt.show()

len(images)

labels = np.array(labels)

from sklearn.model_selection import train_test_split

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)

# Now, X_train and y_train are your training data and labels
# X_test and y_test are your testing data and labels

y_train.shape

type(X_train)

from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.optimizers import Adam

# Download the EfficientNetB0 model
base_model = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Make the model non-trainable
for layer in base_model.layers:
    layer.trainable = False

# Add a new top layer
x = base_model.output
x = Flatten()(x)  # Flatten dimensions to for use in FC layers
x = Dense(512, activation='relu')(x)
x = Dropout(0.5)(x)  # New Dropout layer
predictions = Dense(1, activation='sigmoid')(x)  # New softmax layer

# Create a new model
model = Model(inputs=base_model.input, outputs=predictions)

# Compile the model
model.compile(optimizer=Adam(lr=0.000001), loss='binary_crossentropy', metrics=['accuracy'])

# Train the model

model.summary()

model.fit(X_train, y_train, epochs=5, validation_data=(X_test, y_test))



# Save your model
model.save('/content/drive/MyDrive/ML/mask_model2yolo.h5')

# Save your model
model.save('/content/drive/MyDrive/ML/mask_model.h5')

# Download the model file
from google.colab import files
files.download('mask_model.h5')

